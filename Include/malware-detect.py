import pandas as pd
import numpy as np
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split, cross_val_score
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score


rfc = RandomForestClassifier(n_estimators=50)
Dataset = pd.read_csv(r"C:\Users\user\Desktop\Machine-Learn\venv_learn\Include\MalwareData.csv", sep='|')
input_data = Dataset.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = Dataset['legitimate'].values
extratrees = ExtraTreesClassifier().fit(input_data, labels) #intial_training
select = SelectFromModel(extratrees, prefit=True) #select from the model based on the importance of the features
new_data = select.transform(input_data)

print (input_data.shape, new_data.shape)
features = new_data.shape[1]

#computing the importance of each feature
importance = extratrees.feature_importances_

#sorting the indices of the features based on their importance
indices = np.argsort(importance)[::-1]

# for i in range (features) : 
#     print ("%d"%(i+1), Dataset.columns[2+indices[i]], importance[indices[i]])

X_train, X_test, Y_train, Y_test = train_test_split(new_data,labels,test_size=0.2)
rfc = RandomForestClassifier(n_estimators=50)

#Now, we need to fit the classifier on the training dataset, Therefore
rfc.fit(X_train,Y_train)
prediction = rfc.predict(X_test)

#importing diiferent modules from sklearn.metrics


#calculating the confusion matrix
res = confusion_matrix(Y_test, prediction)
print("Confusion Matrix:")
print(res,"\n")

#printing the classification report
res1 = classification_report(Y_test, prediction)
print("Classification Report:",)
print (res1)

#Calculating the accuracy of the trained model 
res2 = accuracy_score(Y_test,prediction)
print("The accuracy score (in percentage) of the algorithm: ",res2*100)


